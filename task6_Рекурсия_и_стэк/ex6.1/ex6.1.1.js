'use strict';

//Вычислить сумму чисел до данного

//Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.
// Например:

//sumTo(1) = 1
//sumTo(2) = 2 + 1 = 3
//sumTo(3) = 3 + 2 + 1 = 6
//sumTo(4) = 4 + 3 + 2 + 1 = 10
//...
//sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
//Сделайте три варианта решения:
// С использованием цикла.
// Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
// С использованием формулы арифметической прогрессии.

// Пример работы вашей функции:

// средний вариант по скорости, т.к. использует как минимум n количества операций
let sumToWithLoop = n => {
    let sum = 0;
    for (let i = 0; i <= n; i++) {
        sum += i
    }
    return sum
};

// самое медленное решение, использует также n количества операций + затраты на вложенные вызовы
let sumToRecursion = n => {
    return (n === 1) ? 1 : n + sumToRecursion(n - 1)
};

// cамое быстрое решение, т.к. использует всего 3 операции
let sumToMath = n => {
    return n * (n + 1) / 2;
}


console.log(sumToWithLoop(100));
console.log(sumToRecursion(100)); // 5050
console.log(sumToMath(100));
//P.S. Какой вариант решения самый быстрый? Самый медленный? Почему?

// P.P.S. Можно ли при помощи рекурсии посчитать sumTo(100000)? => =>
// => => Некоторые движки поддерживают очень большую глубину рекурсии, но большинство нет,
// так что ответ скорее нет, чем да